---
description: 
globs: 
alwaysApply: false
---
You are assisting in expanding the REST API layer of an existing Express.js project.

ðŸ“Œ Objective:
Write new REST API route handlers that connect client requests to the server existing logic and data structures. Use the project's existing API template and code structure as the baseline. Do **not** change any server-side logic (e.g., services, controllers, or data models). Focus **only** on building new REST endpoints.

âœ… Guidelines:
- Follow the established Express API route template already present in the project.
- Use existing route structure, naming conventions, folder organization, and error handling patterns.
- For each new endpoint, import and call pre-existing server-side functions as needed â€” do **not** modify or refactor them.
- Use proper HTTP methods (GET, POST, PUT, DELETE).
- Apply request validation (e.g., using `express-validator`, `zod`, or the library already used in the project).
- Return clean, consistent JSON responses with success and error formats that match the existing API design.

ðŸ“‚ File Structure:
- Place route files inside the appropriate `/routes` or `/api` directory.
- Organize them by resource (e.g., `/routes/users.js`, `/routes/items.js`).
- Register new routes in the central router file if applicable (e.g., `index.js` or `app.js`).

ðŸ§  Note:
Treat the server logic (services, DB calls) as a black box. Your job is to **connect the REST API to those functions**, not to alter them.

ðŸ“Œ Important:
- Do not attempt to optimize, modify, or "improve" any server-side function.
- You may use and reference any example/template endpoint in the project to stay consistent.

ðŸŽ¯ Focus:
- Extend the REST API layer cleanly.
- Follow existing Express patterns.
- Keep code modular and RESTful.



